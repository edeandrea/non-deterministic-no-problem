quarkus:
  application:
    name: non-deterministic

  # Default LangChain4j configuration
  langchain4j:
    parasol-chat:
      chat-model:
        provider: openai
    embedding-model:
      provider: openai
    log-requests: true
    log-responses: true

    # RAG
    easy-rag:
      path: policies
      path-type: classpath
      reuse-embeddings:
        enabled: true

    # OpenAI
    openai:
      api-key: "${OPENAI_API_KEY}"
      parasol-chat:
        chat-model:
          model-name: gpt-5-mini
          temperature: 1
        timeout: 600s
        api-key: "${quarkus.langchain4j.openai.api-key}"
      generate-email:
        chat-model:
          model-name: gpt-5-mini
          temperature: 1
        timeout: 600s
        api-key: "${quarkus.langchain4j.openai.api-key}"
      politeness:
        chat-model:
          model-name: gpt-5-mini
          temperature: 1
        timeout: 600s
        api-key: "${quarkus.langchain4j.openai.api-key}"

    # Milvus
    milvus:
      dimension: 1536

    # Ollama
    ollama:
      parasol-chat:
        timeout: 600s
        chat-model:
          model-id: llama3.2:latest
          temperature: 0.3
      generate-email:
        timeout: 600s
        chat-model:
          model-id: llama3.2:latest
          temperature: 0.3
      politeness:
        timeout: 600s
        chat-model:
          model-id: llama3.2:latest
          temperature: 0.3
      embedding-model:
        model-id: snowflake-arctic-embed

  # Mail
  mailer:
    tls: false

  # HTTP
  http:
    cors:
      enabled: true
      origins: '*'
  dev-ui:
    cors:
      enabled: true
  tls:
    trust-all: true

  # Jackson
  rest:
    jackson:
      optimization:
        enable-reflection-free-serialization: true

  jackson:
    serialization-inclusion: non-empty

  # Hibernate
  hibernate-orm:
    physical-naming-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

  # Quinoa
  quinoa:
    build-dir: dist
    enable-spa-routing: true
    package-manager-install:
      ~: true
      node-version: 22.18.0
      npm-version: 10.9.3

  # OpenAPI
  smallrye-openapi:
    info-title: Non Deterministic? No Problem!
    info-description: Demo application to show how to test non-deterministic systems
    info-version: 1.0
    info-contact-name: Eric Deandrea
    info-contact-url: https://github.com/edeandrea
  swagger-ui:
    always-include: true

  # Container image
  container-image:
    builder: docker
    group: edeandrea
    name: "${quarkus.application.name}"

  # Websockets
  websockets-next:
    server:
      auto-ping-interval: 1m

  # OpenTelemetry and tracing
  otel:
    logs:
      enabled: true
    metrics:
      enabled: true
  datasource:
    metrics:
      enabled: true
    jdbc:
      telemetry: true

# Ollama profile config
'%ollama':
  quarkus:
    langchain4j:
      parasol-chat:
        chat-model:
          provider: ollama
      generate-email:
        chat-model:
          provider: ollama
      politeness:
        chat-model:
          provider: ollama
      embedding-model:
        provider: ollama
      milvus:
        dimension: 1024

# Ollama using OpenAI endpoint profile config
'%ollama-openai':
  quarkus:
    langchain4j:
      openai:
        base-url: http://localhost:11434/v1
        parasol-chat:
          base-url: "${%ollama-openai.quarkus.langchain4j.openai.base-url}"
          chat-model:
            model-name: "${quarkus.langchain4j.ollama.parasol-chat.chat-model.model-id}"
        generate-email:
          base-url: "${%ollama-openai.quarkus.langchain4j.openai.base-url}"
          chat-model:
            model-name: "${quarkus.langchain4j.ollama.parasol-chat.chat-model.model-id}"
        politeness:
          base-url: "${%ollama-openai.quarkus.langchain4j.openai.base-url}"
          chat-model:
            model-name: "${quarkus.langchain4j.ollama.parasol-chat.chat-model.model-id}"
        embedding-model:
          model-name: "${quarkus.langchain4j.ollama.embedding-model.model-id}"
      milvus:
        dimension: 1024

# Dev mode config
'%dev':
  quarkus:
    datasource:
      dev-ui:
        allow-sql: true
    mailer:
      mock: false

# Dev and test modes config
'%dev,test':
  quarkus:
    log:
      category:
        'org.parasol':
          level: DEBUG
      console:
        level: DEBUG

# test mode config
'%test':
  quarkus:
    otel:
      logs:
        enabled: false
    observability:
      enabled: false
    micrometer:
      export:
        otlp:
          enabled: "${%test.quarkus.observability.enabled}"

# Prod mode config
'%prod':
  quarkus:
    hibernate-orm:
      sql-load-script: import.sql
      schema-management:
        strategy: drop-and-create

'%openshift':
  quarkus:
    config:
      profile:
        parent: prod
    hibernate-orm:
      schema-management:
        strategy: update
    kubernetes:
      deployment-target: openshift
    container-image:
      builder: openshift
      registry: image-registry.openshift-image-registry.svc:5000
    openshift:
      part-of: parasol-insurance
      base-jvm-image: registry.access.redhat.com/ubi9/openjdk-21:1.23
      labels:
        app: non-deterministic
      env:
        configmaps: app-config
        secrets: db-creds,app-creds
      route:
        expose: true
        tls:
          termination: edge
          insecure-edge-termination-policy: Redirect
      annotations:
        "app.openshift.io/connects-to": non-deterministic-db,lgtm,mailpit